How errors well handled!!

1. Bundler Version error
via- https://stackoverflow.com/a/67287741
"""
You need to do the following to ensure the correct default version of Bundler is used for the repo you are working with.

You can run the following but this can present issues as it can break your local gems on your system as ALL of them are updated.

gem update --system
The following method is a much safer way of ensuring Bundler is updated

Get your gem environment and take note of INSTALLATION_DIRECTORY
gem environment
Then run the following
cd <INSTALLATION DIRECTORY>/specifications/default
rm bundler-<old_default_version>.gemspec
gem install --default bundler -v <new_default_version>
If you have followed 2 and that still does not work, then run
gem install bundler:<new_default_version>
to ensure you your local repo is using the correct version

"""


2. Parser error
// internet says to add webrick but it doesn't work
It's because lol ruby 3.x doesn't have webrick (https://github.com/github/pages-gem/issues/752#issuecomment-877780567)
hence. install ruby 2.7.x

3. arrays
"""
The official doc of Liquid doesn’t tell us a way to create an array except this:


{% assign beatles = "John, Paul, George, Ringo" | split: ", " %}

{% for member in beatles %}
  {{ member }}
{% endfor %}
But what if you want to create an array of objects? Well, there’s a trick. First, create an empty array using split and then add your object to the array using push.


{% assign posts = "" | split: "," %}
{% assign posts = posts | push: post %}


---
my_array = []
---

{% assign my_array | push: 'abc' %}

{% assign my_array | push: 'def' %}

{{ my_array | inspect }}

<!-- ['abc', 'def'] -->
"""

4.switch statement
"""
case/when
Creates a switch statement to execute a particular block of code when a variable has a specified value. case initializes the switch statement, and when statements define the various conditions.

A when tag can accept multiple values. When multiple values are provided, the expression is returned when the variable matches any of the values inside of the tag. Provide the values as a comma-separated list, or separate them using an or operator.

An optional else statement at the end of the case provides code to execute if none of the conditions are met.

Input

{% assign handle = "cake" %}
{% case handle %}
  {% when "cake" %}
     This is a cake
  {% when "cookie", "biscuit" %}
     This is a cookie
  {% else %}
     This is not a cake nor a cookie
{% endcase %}

"""
